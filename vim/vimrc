" vim-plug
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'easymotion/vim-easymotion'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree/'
Plug 'scrooloose/nerdcommenter'
Plug 'itchyny/lightline.vim'
Plug 'taohexxx/lightline-buffer'
Plug 'tpope/vim-fugitive'
Plug 'vimwiki/vimwiki'
Plug 'ap/vim-css-color'
Plug 'junegunn/seoul256.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'rstacruz/sparkup'
Plug 'mxw/vim-jsx'
Plug 'mboughaba/i3config.vim'
Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tpope/vim-eunuch'
Plug 'chrisbra/unicode.vim'
Plug 'Shougo/vimproc.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
call plug#end()

" general defaults setup
filetype plugin indent on
syntax on
let g:seoul256_background = 235
colorscheme seoul256
set t_ut= " fixes bg color in tmux
set number relativenumber
let mapleader=" "
set hidden
set history=100
set wrap
set tabstop=4 shiftwidth=4 expandtab smartindent autoindent
set hlsearch
set ignorecase smartcase " search case insensitive unless a capital is used
set cursorline
set showmatch
set splitbelow
set splitright
set mouse=nv " allows mouse interaction in normal/visual mode
set laststatus=2 " for lightline to work with only one screen
set showtabline=2  " always show tabline
set scrolloff=5
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes
set shell=/usr/bin/zsh

" don't ignore strings and comments with EasyAlign
let g:easy_align_ignore_groups = []

let NERDTreeMapActivateNode='l'
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp', '\.class$', '\.git$[[dir]]', '\.pyc$', 'node_modules']

" if the directory for a new file doesn't exist, create it
augroup Mkdir
    autocmd!
    autocmd BufWritePre *
                \ if !isdirectory(expand("<afile>:p:h")) |
                \ call mkdir(expand("<afile>:p:h"), "p") |
                \ endif
augroup END

" compile pdf after saving tex file
autocmd BufWritePost *.tex !pdflatex %

" change tabs to 2 spaces for html/js/ts files
autocmd BufRead,BufNewFile *.html,*.css,*.js,*.jsx,*.ts,*.tsx setlocal tabstop=2 shiftwidth=2

" break lines and enable spellcheck for document based files
autocmd BufRead,BufNewFile *.tex,*.md,*.wiki setlocal linebreak spell

set wildignore+=*/flask/*,*/.git/*,*/db_repository/*,*/node_modules/*

" key mappings
nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>
nnoremap <C-g> :NERDTreeToggle<CR>
nnoremap <leader>s :e!<CR>
nnoremap <leader>f :edit<space>
" open splits
nnoremap <leader>l :vsp<CR>
nnoremap <leader>h :rightb vsp<CR>
nnoremap <leader>j :bel split<CR>
nnoremap <leader>k :split<CR>
" navigate splits
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w><C-w>
nnoremap <C-k> <C-w>W
" resize splits
nnoremap <M-h> <C-w><
nnoremap <M-j> <C-w>+
nnoremap <M-k> <C-w>-
nnoremap <M-l> <C-w>>
" reset resizings
nnoremap <leader>e <C-W>=

" navigate using hjkl in insert
" inoremap <C-h> <Left>
" inoremap <C-j> <Down>
" inoremap <C-k> <Up>
" inoremap <C-l> <Right>

nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>li
" nnoremap L $
" nnoremap H 0
" nnoremap J }
" nnoremap K {
nnoremap <C-y> :bprev<CR>
nnoremap <C-o> :bnext<CR>
" close buffer
nnoremap <C-q> :lclose<bar>b#<bar>bd #<CR>
" delete trailing whitespace in file
nnoremap <leader><BS> :%s/\s\+$//e<CR>
"nnoremap <C-r> :!make run<CR>
nnoremap Y y$
" format text into columns
vnoremap <leader>t :%!column -t<CR>
nnoremap U :redo<CR>
nnoremap gn :cn<CR>
nnoremap gN :cnf<CR>
nnoremap gp :cp<CR>
nnoremap gP :cpf<CR>
nnoremap <leader><leader>l :Goyo<CR>:Limelight!!<CR>

if has('nvim') " only run if using neovim
    tnoremap <Esc><Esc> <C-\><C-n>
    tnoremap <C-h> <Left>
    tnoremap <C-j> <Down>
    tnoremap <C-k> <Up>
    tnoremap <C-l> <Right>
endif

" lsp config
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" lsp normal mode remaps
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <leader>cw <Plug>(coc-rename)
nnoremap <silent> K :call <SID>show_documentation()<CR>
nmap <leader>qf  <Plug>(coc-fix-current)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

let g:coc_node_path='/usr/bin/node'

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" use lightline-buffer in lightline
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'readonly', 'filename', 'modified' ] ],
            \   'right': [ [ 'lineinfo' ], [ 'percent' ],
            \              [ 'cocstatus', 'gitbranch', 'filetype' ] ],
            \ },
            \ 'tabline': {
            \ 'left': [ [], [ 'bufferbefore', 'buffercurrent', 'bufferafter' ] ],
            \ 'right': [],
            \ },
            \ 'component_expand': {
            \   'buffercurrent': 'lightline#buffer#buffercurrent',
            \   'bufferbefore': 'lightline#buffer#bufferbefore',
            \   'bufferafter': 'lightline#buffer#bufferafter',
            \ },
            \ 'component_type': {
            \   'buffercurrent': 'tabsel',
            \   'bufferbefore': 'raw',
            \   'bufferafter': 'raw',
            \ },
            \ 'component_function': {
            \   'bufferinfo': 'lightline#buffer#bufferinfo',
            \   'filename': 'LightlineFilename',
            \   'gitbranch': 'fugitive#head',
            \   'cocstatus': 'coc#status',
            \ },
            \ }

" update lightline on coc update
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

" lightline-buffer ui settings
" replace these symbols with ascii characters if your environment does not support unicode
let g:lightline_buffer_logo = '(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ '
let g:lightline_buffer_readonly_icon = ''
let g:lightline_buffer_modified_icon = '●'
let g:lightline_buffer_git_icon = ' '
let g:lightline_buffer_ellipsis_icon = '...'
let g:lightline_buffer_expand_left_icon = '◀ '
let g:lightline_buffer_expand_right_icon = ' ▶'
let g:lightline_buffer_active_buffer_right_icon = ''
let g:lightline_buffer_separator_icon = ' '

" lightline-buffer function settings
let g:lightline_buffer_show_bufnr = 1
let g:lightline_buffer_rotate = 0
let g:lightline_buffer_fname_mod = ':t'
let g:lightline_buffer_excludes = ['vimfiler']
let g:lightline_buffer_maxflen = 30
let g:lightline_buffer_maxfextlen = 3
let g:lightline_buffer_minflen = 16
let g:lightline_buffer_minfextlen = 3
let g:lightline_buffer_reservelen = 20
