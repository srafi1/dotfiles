" vim-plug
call plug#begin('~/.vim/plugged')
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'jiangmiao/auto-pairs'
Plug 'nelstrom/vim-visual-star-search'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-fugitive'
Plug 'vimwiki/vimwiki'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-rsi'
Plug 'chrisbra/unicode.vim'
Plug 'puremourning/vimspector'
Plug 'justinmk/vim-dirvish'
Plug 'liuchengxu/vista.vim'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'stsewd/fzf-checkout.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'RRethy/nvim-treesitter-textsubjects'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'itchyny/vim-qfedit'
Plug 'akinsho/nvim-toggleterm.lua'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-compe'
Plug 'SirVer/ultisnips'
Plug 'nvim-lua/lsp-status.nvim'
Plug 'RishabhRD/popfix'
Plug 'RishabhRD/nvim-lsputils'
Plug 'kosayoda/nvim-lightbulb'
Plug 'ray-x/lsp_signature.nvim'
call plug#end()

" general defaults setup
set termguicolors
let g:seoul256_background = 234
colorscheme seoul256-custom
filetype plugin indent on
syntax on
set number relativenumber
let mapleader=" "
set hidden
set history=100
set wrap
set tabstop=4 shiftwidth=4 expandtab smartindent autoindent
set hlsearch
set ignorecase smartcase " search case insensitive unless a capital is used
set cursorline
set showmatch
set splitbelow
set splitright
set mouse=nv " allows mouse interaction in normal/visual mode
set scrolloff=3
set updatetime=300
set shortmess+=c
set signcolumn=yes
set shell=/usr/bin/zsh
set wildignore+=.git,node_modules

" use fd for FZF (respect .gitignore)
let $FZF_DEFAULT_COMMAND='fd --type f'
" do not force delete branch
let g:fzf_branch_actions = {}
let g:fzf_branch_actions.delete = {}
let g:fzf_branch_actions.delete.execute = 'G branch -d {branch}'
let g:fzf_branch_actions.checkout = {}
let g:fzf_branch_actions.checkout.execute = 'G checkout {branch}'

if exists(':terminal')
    au TermOpen * tnoremap <buffer> <Esc><Esc> <C-\><C-n>
    au FileType fzf tunmap <buffer> <Esc><Esc>
    au FileType fzf tnoremap <buffer> <Esc> <C-c>
endif

" don't ignore strings and comments with EasyAlign
let g:easy_align_ignore_groups = []

" if the directory for a new file doesn't exist, create it
augroup Mkdir
    autocmd!
    autocmd BufWritePre *
                \ if !isdirectory(expand("<afile>:p:h")) |
                \ call mkdir(expand("<afile>:p:h"), "p") |
                \ endif
augroup END

" compile pdf after saving tex file
autocmd BufWritePost *.tex !pdflatex %
let g:tex_flavor = "latex"

" custom tab config by file extension
autocmd BufRead,BufNewFile 
            \ *.html,*.css,*.js,*.jsx,*.ts,*.tsx,*.dart,*.lua
            \ setlocal tabstop=2 shiftwidth=2
autocmd BufRead,BufNewFile *.go setlocal noexpandtab

" break lines and enable spellcheck for document based files
autocmd BufRead,BufNewFile *.tex,*.md,*.mdx,*.wiki,*.txt call WritingMode()
function! WritingMode()
    setlocal linebreak spell
    nnoremap <buffer> j gj
    nnoremap <buffer> k gk
endfunction
autocmd BufRead,BufNewFile *.wiki nnoremap <buffer> <leader>d o<Esc>:r! date "+\%Y-\%m-\%d"<CR> 
let g:vimwiki_global_ext = 0

" Vimspector function key keybindings
let g:vimspector_enable_mappings = 'HUMAN'

" key mappings
nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>
nnoremap U :redo<CR>
nnoremap Y y$
" paste without overwriting default register
vnoremap <leader>p "_dP
nnoremap <leader>p :set opfunc=ReplaceMotion<CR>g@
function! ReplaceMotion(type)
    silent exe "normal! `[v`]\"_dP"
endfunction
nnoremap <C-p> :FZF<CR>
nnoremap <C-b> :Buffers<CR>
" reload file
nnoremap <leader>s :e!<CR>
" resize splits
nnoremap <M-h> <C-w><
nnoremap <M-j> <C-w>+
nnoremap <M-k> <C-w>-
nnoremap <M-l> <C-w>>
nnoremap <M-e> <C-W>=
" save file
nnoremap <C-s> :w<CR>
inoremap <C-s> <C-o>:w<CR>
" close buffer
nnoremap <C-q> :lclose<bar>b#<bar>bd #<CR>
" delete trailing whitespace in file
nnoremap <leader><BS> :%s/\s\+$//e<CR>
" format text into columns
vnoremap <leader>t :%!column -t<CR>
" view unsaved edits in current buffer
nnoremap <leader>d :w !diff % -<CR>
" navigate quickfix list
nnoremap gn :cn<CR>
nnoremap gN :cnf<CR>
nnoremap gp :cp<CR>
nnoremap gP :cpf<CR>
" goyo and limelight for writing
nnoremap <leader><leader>l :Goyo<CR>:Limelight!!<CR>
" toggle editor layout
nnoremap <silent> <M-o> :Vista!!<CR>

" -------------------- LSP ---------------------------------
lua << EOF
  local lsp_status = require('lsp-status')
  lsp_status.register_progress()
  lsp_status.config({
    current_function = false,
    status_symbol = '',
    indicator_errors = 'E',
    indicator_warnings = 'W',
    indicator_info = 'I',
    indicator_hint = 'H',
    indicator_ok = 'LSP',
    spinner_frames = { '⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷' },
  })

  local nvim_lsp = require('lspconfig')

  local on_attach = function(client, bufnr)
    lsp_status.on_attach(client)
    require'lsp_signature'.on_attach{
      hint_enable = false,
      hi_parameter = 'IncSearch',
    }

    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings
    local opts = { noremap=true, silent=true }
    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('i', '<C-p>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
    buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap('n', '<space>cw', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    buf_set_keymap('v', '<space>ca', '<cmd>lua vim.lsp.buf.range_code_action()<CR>', opts)
    buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics({border = "single"})<CR>', opts)
    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev({enable_popup = false})<CR>', opts)
    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next({enable_popup = false})<CR>', opts)
    buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)

    -- Set some keybinds conditional on server capabilities
    if client.resolved_capabilities.document_formatting then
        buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
    elseif client.resolved_capabilities.document_range_formatting then
        buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
    end
  end

  -- individual server config
  -- remember to add installation instructions for new servers to ./lsp-install.sh
  local servers = {
    pyright = {},
    ccls = {},
    texlab = {},
    tsserver = {},
    bashls = {},
    cssls = {},
    dockerls = {},
    html = {},
    vimls = {},
    gopls = {
      settings = {
        gopls = {
          linksInHover = false
        }
      }
    },
    sumneko_lua = {
      cmd = {'lua-language-server'},
      settings = {
        Lua = {
          workspace = {
            preloadFileSize = 200 -- increase this if necessary
          }
        }
      }
    },
    jdtls = {
      cmd = {'jdtls'},
      cmd_env = {
        PATH = '/usr/lib/jvm/java-11-openjdk/bin/:/usr/sbin',
      },
    },
  }
  for lsp, config in pairs(servers) do
    config.on_attach = on_attach 
    config.capabilities = lsp_status.capabilities 
    nvim_lsp[lsp].setup(config)
  end

  -- add borders to popups
  vim.lsp.handlers["textDocument/hover"] =
    vim.lsp.with(vim.lsp.handlers.hover, { border = "single" })

  -- lsputil handlers
  vim.lsp.handlers['textDocument/codeAction'] = require'lsputil.codeAction'.code_action_handler
  vim.lsp.handlers['textDocument/references'] = require'lsputil.locations'.references_handler
  vim.lsp.handlers['textDocument/definition'] = require'lsputil.locations'.definition_handler
  vim.lsp.handlers['textDocument/declaration'] = require'lsputil.locations'.declaration_handler
  vim.lsp.handlers['textDocument/typeDefinition'] = require'lsputil.locations'.typeDefinition_handler
  vim.lsp.handlers['textDocument/implementation'] = require'lsputil.locations'.implementation_handler
  vim.lsp.handlers['textDocument/documentSymbol'] = require'lsputil.symbols'.document_handler
  vim.lsp.handlers['workspace/symbol'] = require'lsputil.symbols'.workspace_handler

  -- diagnostics
  vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
      virtual_text = false,
    }
  )
EOF

" diagnostics sign/highlight definitions
sign define LspDiagnosticsSignWarning     text=>>
sign define LspDiagnosticsSignError       text=>>
sign define LspDiagnosticsSignInformation text=?
sign define LspDiagnosticsSignHint        text=~

" lightbulb
autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()
sign define LightBulbSign text=! texthl=WarningMsg

" completion
set completeopt=menuone,noinsert,noselect
let g:compe_config = {}
let g:compe_config.source = {}
let g:compe_config.source.nvim_lsp = v:true
let g:compe_config.source.nvim_lua = v:true
let g:compe_config.source.path = v:true
let g:compe_config.source.ultisnips = v:true
call compe#setup(g:compe_config)
inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR> pumvisible() ? compe#confirm('<CR>') : "\<CR>"
inoremap <silent><expr> <C-e> compe#close('<C-e>')
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
let g:UltiSnipsExpandTrigger='<NUL>'
let g:snips_author='Shakil Rafi'
" -------------------- LSP ---------------------------------

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

function! LspStatus() abort
  if luaeval('#vim.lsp.buf_get_clients() > 0')
    return luaeval("require('lsp-status').status()")
  endif
  return ''
endfunction

" use lightline-buffer in lightline
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'gitbranch', 'filename' ],
            \             [ 'readonly', 'modified' ] ],
            \   'right': [ [ 'lineinfo' ], 
            \              [ 'lspstatus', 'filetype' ] ],
            \ },
            \ 'component_function': {
            \   'filename': 'LightlineFilename',
            \   'gitbranch': 'fugitive#head',
            \   'lspstatus': 'LspStatus',
            \ },
            \ 'component': {
            \   'lineinfo': "%{'(' . line('.') . ':' . col('.') .  ')/' . line('$')}"
            \ }
            \ }

" treesitter setup
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
  textobjects = {
    select = {
      enable = true,
      keymaps = {
        ["ib"] = "@block.inner",
        ["ab"] = "@block.outer",
        ["if"] = "@function.inner",
        ["af"] = "@function.outer",
        ["ic"] = "@call.inner",
        ["ac"] = "@call.outer",
        ["ia"] = "@parameter.inner",
        ["aa"] = "@parameter.outer",
      },
    },
    move = {
      enable = true,
      goto_next_start = {
        ["]]"] = "@function.outer",
        ["]a"] = "@parameter.inner",
      },
      goto_next_end = {
        ["]["] = "@function.outer",
      },
      goto_previous_start = {
        ["[["] = "@function.outer",
        ["[a"] = "@parameter.inner",
      },
      goto_previous_end = {
        ["[]"] = "@function.outer",
      },
    },
  },
  textsubjects = {
    enable = true,
    keymaps = {
      ['.'] = 'textsubjects-smart',
    }
  },
}
require'colorizer'.setup()
require"toggleterm".setup{
  size = 10,
  open_mapping = '<M-t>',
  persist_size = true,
}
EOF
