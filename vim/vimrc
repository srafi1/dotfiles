" vim-plug
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'taohexxx/lightline-buffer'
Plug 'scrooloose/nerdtree/'
Plug 'tomtom/tlib_vim.git'
Plug 'MarcWeber/vim-addon-mw-utils.git'
Plug 'vimwiki/vimwiki'
Plug 'ap/vim-css-color'
Plug 'SirVer/ultisnips'
Plug 'ervandew/supertab'
Plug 'tpope/vim-fugitive'
Plug 'mxw/vim-jsx'
Plug 'rstacruz/sparkup'
Plug 'Valloric/YouCompleteMe', {'do': 'python install.py --all'}
Plug 'mboughaba/i3config.vim'
Plug 'tpope/vim-eunuch'
Plug 'chrisbra/unicode.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'
Plug 'w0rp/ale'
Plug 'Shougo/vimproc.vim'
call plug#end()

" general defaults setup
filetype plugin indent on
syntax on
colorscheme darcula
set t_ut= " fixes bg color in tmux
set number relativenumber
let mapleader=" "
set hidden
set history=100
set wrap
set tabstop=4 shiftwidth=4 expandtab smartindent autoindent
set hlsearch
set cursorline
set showmatch
set splitbelow
set splitright
set mouse=a " allows mouse interaction in terminal
set laststatus=2 " for lightline to work with only one screen
set showtabline=2  " always show tabline

let NERDTreeMapActivateNode='l'
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp', '\.class$', '\.git$[[dir]]', '\.pyc$', 'node_modules']

augroup Mkdir
    autocmd!
    autocmd BufWritePre *
                \ if !isdirectory(expand("<afile>:p:h")) |
                \ call mkdir(expand("<afile>:p:h"), "p") |
                \ endif
augroup END

" compile pdf after saving tex file
autocmd BufWritePost *.tex !pdflatex %

" change tabs to 2 spaces for html files
autocmd BufRead,BufNewFile *.html,*.jsx,*.js set tabstop=2 shiftwidth=2
set wildignore+=*/flask/*,*/.git/*,*/db_repository/*,*/node_modules/*

" key mappings
nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>
nnoremap <C-g> :NERDTreeToggle<CR>
nnoremap <leader>s :e!<CR>
nnoremap <leader>f :edit<space>
" open splits
nnoremap <leader>l :vsp<CR>
nnoremap <leader>h :rightb vsp<CR>
nnoremap <leader>j :bel split<CR>
nnoremap <leader>k :split<CR>
" navigate splits
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w><C-w>
nnoremap <C-k> <C-w>W
" resize splits
nnoremap <M-h> <C-w><
nnoremap <M-j> <C-w>+
nnoremap <M-k> <C-w>-
nnoremap <M-l> <C-w>>
" reset resizings
nnoremap <leader>e <C-W>=

" navigate using hjkl in insert
" inoremap <C-h> <Left>
" inoremap <C-j> <Down>
" inoremap <C-k> <Up>
" inoremap <C-l> <Right>

nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>li
" nnoremap L $
" nnoremap H 0
" nnoremap J }
" nnoremap K {
nnoremap <C-y> :bprev<CR>
nnoremap <C-o> :bnext<CR>
" close buffer
nnoremap <C-q> :lclose<bar>b#<bar>bd #<CR>
nnoremap <leader><BS> :%s/\s\+$//e<CR>
nnoremap <C-r> :!make run<CR>
nnoremap Y y$
nnoremap <leader>d o<Esc>:r! date "+\%Y-\%m-\%d"<CR>
vnoremap <leader>t :%!column -t<CR>

nnoremap U :redo<CR>
if has('nvim') " only run if using neovim
    tnoremap <Esc><Esc> <C-\><C-n>
    tnoremap <C-h> <Left>
    tnoremap <C-j> <Down>
    tnoremap <C-k> <Up>
    tnoremap <C-l> <Right>
endif

" use lightline-buffer in lightline
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ],
            \ },
            \ 'tabline': {
            \ 'left': [ [ 'bufferinfo' ], [ 'bufferbefore', 'buffercurrent', 'bufferafter' ] ],
            \ 'right': [],
            \ },
            \ 'component_expand': {
            \   'buffercurrent': 'lightline#buffer#buffercurrent',
            \   'bufferbefore': 'lightline#buffer#bufferbefore',
            \   'bufferafter': 'lightline#buffer#bufferafter',
            \ },
            \ 'component_type': {
            \   'buffercurrent': 'tabsel',
            \   'bufferbefore': 'raw',
            \   'bufferafter': 'raw',
            \ },
            \ 'component_function': {
            \   'bufferinfo': 'lightline#buffer#bufferinfo',
            \ },
            \ 'component': {
            \   'separator': '',
            \ },
            \ }

" lightline-buffer ui settings
" replace these symbols with ascii characters if your environment does not support unicode
let g:lightline_buffer_logo = '(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ '
let g:lightline_buffer_readonly_icon = ''
let g:lightline_buffer_modified_icon = '●'
let g:lightline_buffer_git_icon = ' '
let g:lightline_buffer_ellipsis_icon = '...'
let g:lightline_buffer_expand_left_icon = '◀ '
let g:lightline_buffer_expand_right_icon = ' ▶'
let g:lightline_buffer_active_buffer_right_icon = ''
let g:lightline_buffer_separator_icon = ' '

" lightline-buffer function settings
let g:lightline_buffer_show_bufnr = 1
let g:lightline_buffer_rotate = 0
let g:lightline_buffer_fname_mod = ':t'
let g:lightline_buffer_excludes = ['vimfiler']
let g:lightline_buffer_maxflen = 30
let g:lightline_buffer_maxfextlen = 3
let g:lightline_buffer_minflen = 16
let g:lightline_buffer_minfextlen = 3
let g:lightline_buffer_reservelen = 20

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-m>', '<Up>', '<S-TAB>']
let g:ycm_key_list_stop_completion = ['<Enter>']
let g:SuperTabDefaultCompletionType = '<C-n>'

let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_min_num_of_chars_for_completion = 2

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
