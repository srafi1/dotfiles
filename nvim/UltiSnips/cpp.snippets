## Main
# main()
snippet main
int main() {
	${0}
	return 0;
}
endsnippet
# main
snippet mainn
int main(int argc, const char *argv[]) {
	${0}
	return 0;
}
endsnippet
##
## Preprocessor
# #include <...>
snippet inc
#include <${1:iostream}>
endsnippet
# #include "..."
snippet incc
#include "${1:catch.hpp}"
endsnippet
# ifndef...define...endif
snippet ndef
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet
# define
snippet def
#define
endsnippet
# ifdef...endif
snippet ifdef
#ifdef ${1:FOO}
	${2:#define }
#endif
endsnippet
# if
snippet #if
#if ${1:FOO}
	${0:${VISUAL}}
#endif
endsnippet
# header include guard

##
## Control Statements
# if
snippet if
if (${1}) {
	${0}
}
endsnippet
snippet ife
if (${1}) {
	${2}
} else {
	${0}
}
endsnippet
# else
snippet el
else {
	${0:${VISUAL}}
}
endsnippet
# else if
snippet elif
else if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet
# ifi
snippet ifi
if (${1:true}) ${0};
endsnippet
# ternary
snippet t
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet
# switch
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet
# switch without default
snippet switchndef
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
}
endsnippet
# case
snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet
snippet ret
return ${0:ret};
endsnippet
##
## Loops
# for
snippet for
for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++}) {
	${0}
}
endsnippet
# while
snippet while
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet
# do... while
snippet do
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet

##
## Functions
# function definition
snippet fn
${1:void} ${2:functionName}(${3}) {
	${0}
}
endsnippet
# function definition with zero parameters
snippet fn0
${1:void} ${2:functionName}() {
	${0}
}
endsnippet

##
## Custom
# I/O
snippet cout
std::cout << ${1} << std::endl;
endsnippet
snippet out
std::cout << ${1};
endsnippet
snippet cin
std::cin >> ${1};
endsnippet
